package cz.deznekcz.util;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import java.util.function.Function;
import java.util.function.Supplier;

import cz.deznekcz.javafx.components.Dialogs;
import cz.deznekcz.util.xml.XML;
import cz.deznekcz.util.xml.XMLLoader;
import cz.deznekcz.util.xml.XMLPairTag;
import cz.deznekcz.util.xml.XMLRoot;
import cz.deznekcz.util.xml.XMLStepper;
import cz.deznekcz.util.xml.XMLStepper.Step;
import cz.deznekcz.util.xml.XMLStepper.StepDocument;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;

/**
 * Instances of live storage represents an xml file with simple structure:
 *
<pre>
{@code
<?xml version="1.0" encoding="UTF-8"?>

<!-- Autogenerated by LiveStorage.save() -->
<storage >
  <!-- Last stored values -->
  <values >
    <value id="value1" ><![CDATA[data1]]></value>
    <value id="value2" ><![CDATA[data2]]></value>
  </values>
  <!-- Loads a configuration tab -->
  <id >setup</id>
</storage>
}
</pre>
 *  File can be opened multiple time but be careful with saving.
<br>Size storage is limited by file saving speed only (more values -> greater time to save).
 * @author Zdenek Novotny (DeznekCZ)
 * @see EntryValue EntryValue as change listener instatiation
 */
public class LiveStorage {

    /**
     *
     *
     * @author Zdenek Novotny (DeznekCZ)
     * @param <I> Parameter class implementation of change listener
     */
    public static class EntryValue<I> implements ChangeListener<I> {

    	public static <I> void setup(ObservableValue<I> observable, LiveStorage storage, String id) {
    		EntryValue<I> listener = new EntryValue<>(storage, id);
    		observable.removeListener(listener);
    		observable.addListener(listener);
    	}

        private LiveStorage storage;
        private String id;

        private EntryValue(LiveStorage storage, String id) {
            this.storage = storage;
            this.id = id;
        }

        @Override
        public void changed(ObservableValue<? extends I> observable, I oldValue, I newValue) {
            storage.setValue(id, newValue == null ? "" : newValue.toString());
        }

        @SuppressWarnings("unchecked")
		@Override
        public boolean equals(Object obj) {
        	return obj instanceof EntryValue && match((EntryValue<I>) obj);
        }

        @Override
        public int hashCode() {
        	return this.storage.getId().hashCode() ^ this.id.hashCode();
        }

		private boolean match(EntryValue<I> obj) {
			return this.storage == obj.storage && this.id.equals(obj.id);
		}

    }

    private StringProperty id;
    private File cfg;
    private Map<String, String> searched;

    private XML xml;
    private XMLPairTag<XMLRoot> values;
	private boolean needSave;
	private boolean autosave;

    private LiveStorage(File cfg) throws IOException {
        this.cfg = cfg;

        searched = new HashMap<>();

        StepDocument document = XMLStepper.fromFile(cfg);
        id = new SimpleStringProperty( document.getNode("storage/id").text() );

        xml = XML.init("storage");
        xml.comment("Autogenerated by LiveStorage.save()");
        values = xml.root() // continues at next line with definition
            .newPairTag("id", false)
                .setComment("Loads a configuration tab")
                .setText(id.get())
            .close()
            .newPairTag("values")
                .setComment("Last stored values");

        for (Step value : document.getList("storage/values/value")) {
            searched.put(value.attribute("id"), value.text());
        }

        if (!this.cfg.getName().equals("template.run.xml") && !this.cfg.setWritable(true))
            Dialogs.EXCEPTION.show(new IOException("Writeability can not be changed! file: \n" + this.cfg.getAbsolutePath()));
    }

    public StringProperty idProperty() {
        return id;
    }

    public boolean hasAutosave() {
		return autosave;
	}

    public void setAutosave(boolean autosave) {
		this.autosave = autosave;
	}

    public void saveGUI() {
    	try {
    		save();
        } catch (IOException e) {
            Dialogs.EXCEPTION.show(e);
        }
    }

    public void save() throws IOException {
    	if (needSave || autosave) {
            values.clear();
            // Fill values
            for (Entry<String, String> value : searched.entrySet()) {
                values.newPairTag("value", false)
                        .addAttribute("id", value.getKey())
                        .setTextCDATA(value.getValue());
            }

            XMLLoader.save(cfg, xml);
            needSave = false;
    	}
	}

	public static String getId(File file) throws IOException {
        return XMLStepper.fromFile(file).getNode("storage/id").text();
    }

	public String getId() {
        return id.get();
    }

    public void setId(String id) {
        this.id.set(id);
    }

    public boolean hasValue(String key) {
        return searched.containsKey(key);
    }

    public String getValue(String key) {
        return searched.get(key);
    }

    /**
     *
     * @param key
     * @param generator usually method like {@link Boolean#valueOf(String)}
     * @return
     */
    public <C> C getValue(String key, Function<String, C> generator) {
    	Objects.requireNonNull(generator, "Generator not specified");
		return generator.apply(getValue(key));
    }

	public <C> C getValue(String key, C defaultValue) {
		Objects.requireNonNull(defaultValue, "No default value was set");
		@SuppressWarnings("unchecked")
		C value = (C) getValue(key, defaultValue.getClass());
		return value != null ? value : defaultValue;
	}

    public void setLateValue(String key, String value) {
    	needSave |= !compare(value, searched.put(key, value == null ? "" : value));
    }

    public <T> void setLateValue(String key, T value) {
    	String valueString = value == null ? "" : value.toString();
    	needSave |= !compare(valueString, searched.put(key, valueString == null ? "" : valueString));
    }

    public void setValue(String key, String value) {
        if (!compare(value, searched.put(key, value == null ? "" : value))) {
            if (Platform.isFxApplicationThread()) {
            	saveGUI();
            } else {
            	try {
					save();
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        }
    }

    public <T> void setValue(String key, T value) {
    	String valueString = value == null ? "" : value.toString();
        if (!compare(valueString, searched.put(key, valueString == null ? "" : valueString))) {
        	if (Platform.isFxApplicationThread()) {
            	saveGUI();
            } else {
            	try {
					save();
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        }
    }

    private boolean compare(String s1, String s2) {
        if (s1 == null) {
            return s2 == null;
        } else {
            return s1.equals(s2);
        }
    }

    public static boolean isStorage(File cfg) {
        try {
            new LiveStorage(cfg);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public String getName() {
        return cfg.getName().replace(".run.xml", "");
    }

    public static LiveStorage create(String id, File cfg) throws IOException {
        XMLLoader.save(cfg,
            XML.init("storage")
                .comment("Autogenerated by LiveStorage.create()")
                .root() // continues at next line with definition
                    .newPairTag("id", false)
                        .setComment("Loads a configuration tab")
                        .setText(id)
                    .close()
                    .newPairTag("values")
                        .setComment("Last stored values")
                    .close()
                .close());
        return new LiveStorage(cfg);
    }

    public static LiveStorage open(File cfg) throws IOException {
        return new LiveStorage(cfg);
    }

    public File getFile() {
        return cfg;
    }

	public <C> ChangeListener<C> getListener(String id) {
		return new EntryValue<>(this, id);
	}

	public Set<Entry<String, String>> getValues() {
		return searched.entrySet();
	}
}
